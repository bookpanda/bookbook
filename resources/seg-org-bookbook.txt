Directory structure:
└── seg-org-bookbook/
    ├── README.md
    ├── docker-compose.yaml
    ├── eslint.config.mjs
    ├── next.config.ts
    ├── package.json
    ├── pnpm-lock.yaml
    ├── postcss.config.mjs
    ├── tailwind.config.ts
    ├── tsconfig.json
    ├── .env.template
    ├── .prettierrc
    ├── prisma/
    │   ├── README.md
    │   ├── schema.prisma
    │   ├── seed.mjs
    │   └── migrations/
    │       ├── migration_lock.toml
    │       └── 20250205081714_book_and_post/
    │           └── migration.sql
    ├── public/
    │   └── images/
    │       └── ethical-algo.webp
    ├── src/
    │   ├── app/
    │   │   ├── globals.css
    │   │   ├── layout.tsx
    │   │   ├── page.tsx
    │   │   ├── api/
    │   │   │   ├── books/
    │   │   │   │   ├── route.ts
    │   │   │   │   └── [id]/
    │   │   │   │       └── route.ts
    │   │   │   └── posts/
    │   │   │       ├── route.ts
    │   │   │       └── [id]/
    │   │   │           └── route.ts
    │   │   └── searchPage/
    │   │       ├── page.tsx
    │   │       └── components/
    │   │           ├── SearchByDetail.tsx
    │   │           ├── bookCard.tsx
    │   │           ├── bookList.tsx
    │   │           └── header.tsx
    │   ├── data/
    │   │   └── book.ts
    │   ├── lib/
    │   │   └── prisma.ts
    │   └── types/
    │       └── book.ts
    └── .github/
        └── pull_request_template.md

================================================
File: README.md
================================================
# BookBook

online book store.

## Stack

- nextjs
- typescript
- tailwindcss
- (what should we use for state management? React Context?)

## Prerequisites

Download these tools before you start working on the project.

- pnpm 9.5.0 or later
- Prettier VSCode extension (also set format on save)
- Docker (if you want to run the database locally)

## Setup

1. Clone the repository
2. Run `pnpm install`
3. Copy `.env.template` file in root of the project as `.env` into the root of the project fill in the values (in discord).
4. Run `docker-compose up` to start local database (you need to have Docker Desktop running, and you can use the default values in `.env.template` for the database connection)
5. Run `npx prisma migrate deploy` to create tables in the database
6. Run `npx prisma generate` to generate the Prisma client
7. Run `npx prisma db seed` to seed the database
8. Run `pnpm dev` to start the application


================================================
File: docker-compose.yaml
================================================
services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: "bookbook_db"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "notverys3curepassword"
    ports:
      - "5432:5432"
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: "admin"
      MONGO_INITDB_ROOT_PASSWORD: "notverys3curepassword"
      MONGO_INITDB_DATABASE: "bookbook_db"
    ports:
      - "27017:27017"
    restart: unless-stopped
    volumes:
      - mongodb_data:/data/db

volumes:
  postgres_data:
  mongodb_data:


================================================
File: eslint.config.mjs
================================================
import { FlatCompat } from "@eslint/eslintrc";
import { dirname } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;


================================================
File: next.config.ts
================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;


================================================
File: package.json
================================================
{
  "name": "bookbook",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "postinstall": "prisma generate"
  },
  "prisma": {
    "seed": "node prisma/seed.mjs"
  },
  "dependencies": {
    "@prisma/client": "^6.3.0",
    "next": "15.1.6",
    "prisma": "^6.3.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8",
    "prettier": "^3.4.2",
    "prettier-plugin-organize-imports": "^4.1.0",
    "prettier-plugin-tailwindcss": "^0.6.11",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  },
  "packageManager": "pnpm@10.2.0"
}


================================================
File: postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;


================================================
File: tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
      gridTemplateColumns: {
        "auto-fit-400": "repeat(auto-fit, minmax(400px, 1fr))",
      },
    },
  },
  plugins: [],
} satisfies Config;


================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "prisma/seed.mjs"],
  "exclude": ["node_modules"]
}


================================================
File: .env.template
================================================
POSTGRES_URL=postgres://postgres:notverys3curepassword@localhost:5432/bookbook_db
MONGO_URL=mongodb://admin:notverys3curepassword@localhost:27017


================================================
File: .prettierrc
================================================
{
  "plugins": [
    "prettier-plugin-organize-imports",
    "prettier-plugin-tailwindcss"
  ],
  "trailingComma": "es5",
  "tabWidth": 2,
  "printWidth": 120,
  "semi": true,
  "singleQuote": false,
  "endOfLine": "auto"
}


================================================
File: prisma/README.md
================================================
# Prisma commands

```bash
npx prisma format

npx prisma migrate dev --name <name>

npx prisma generate

```


================================================
File: prisma/schema.prisma
================================================
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Book {
  id            String  @id @default(cuid())
  title         String
  author        String
  genre         String
  description   String
  isbn          String
  pages         Int
  coverImageUrl String? @map("cover_image_url")
  // seller    User     @relation(fields: [sellerId], references: [id])
  // sellerId  String
  posts         Post[]

  @@map("book")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  // seller    User     @relation(fields: [sellerId], references: [id])
  // sellerId  String
  book      Book    @relation(fields: [bookId], references: [id])
  bookId    String  @map("book_id")

  @@map("post")
}


================================================
File: prisma/seed.mjs
================================================
// @ts-check

import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// Check if the database is already seeded
const books = await prisma.book.findMany();
if (books.length > 0) {
  console.warn("Database is already seeded. Exiting...");
  process.exit(0);
}

await prisma.book.createMany({
  data: [
    {
      title: "สถาปัตยกรรมคอมพิวเตอร์ การออกแบบและวิเคราะห์",
      author: "ดร. เกริก ภิรมย์โสภา",
      genre: "คอมพิวเตอร์",
      description: "สถาปัตยกรรมคอมพิวเตอร์ การออกแบบและวิเคราะห์",
      isbn: "9786164681156",
      pages: 217,
      coverImageUrl: "/images/krerk-csa-book.jpg",
    },
    {
      title: "人妻教師が教え子の女子高生にドはまりする話",
      author: "入間 人間",
      genre: "Girls Love",
      description: `「そんな優しいとさ、せんせぇのこと好きになっちゃうよっ」

苺原樹――年齢は二十代後半。既婚者。職業は高校教師。そんな私が、10歳年下の教え子の女子高生に手を出してしまった。
生徒の名前は戸川凛。私より背が高くて、温和でどこか幼くて、顔がいい。そしてとてもいい子。家庭環境に問題のあった彼女を気にかけているうちに、いつしかベッドの上で唇を重ねていた。
これは間違いなく裏切りで不倫で犯罪で。身の破滅を招き寄せる要素を、よくもこれだけ集めて。
――なぜこんなことになってしまったんだろう。
淫らで不貞で、でもどこかあたたかい。女教師と女子生徒の恋愛小説`,
      isbn: "978-4049158069",
      pages: 328,
      coverImageUrl: "/hitozuma-1.jpg",
    },
    {
      title: "人妻教師が教え子の女子高生にドはまりする話2",
      author: "入間 人間",
      genre: "Girls Love",
      description: `「でも、今日はせんせぇが悪いよね」

こんにちは! 私淫行教師の苺原樹! 十歳年下の教え子と関係を結んで平気な顔で教壇に立っているどうしようもないやつだよ!
……そう、私は教師失格で反社会的人物で犯罪者で、夫を裏切り幸せを噛みしめている最低の妻。それでも、後悔自体は一切ない。戸川さんに会ってから、私は私の望む道を選んだ。いずれ必ず訪れる破滅を前にしても、この子を守りたい、傷つけさせたくない。私以外のありとあらゆるものから、触れさせたくない。
―ー道を踏み外した理由は、好きな人ができたから。
欲望にまみれて破滅的で、でもどこまでも優しい。女教師と女子生徒の恋愛小説、第二弾。`,
      isbn: "978-4049160918",
      pages: 246,
      coverImageUrl: "/hitozuma-2.jpg",
    },
    {
      title: "AI ที่มีหัวใจ The Ethical Algorithm",
      author:
        "ไมเคิล เคินส์ และ แอรอน รอท (Michael Kearns and Aaron Roth) / ผู้ช่วยศาสตราจารย์ ดร. จิตร์ทัศน์ ฝักเจริญผล",
      genre: "คอมพิวเตอร์",
      description: `ทำไม AI ต้องมีหัวใจ?

จะเป็นอย่างไรหากอัลกอรึทึมของกูเกิลเผยแพร่แนวคิดเหยียดเพศโดยไม่ได้ตั้งใจ เช่น ผลการค้นหาคำว่า สุภาพสตรี มีความสัมพันธ์กับคำว่า ต่างหู ในขณะที่คำว่า หลานชาย มีความสัมพันธ์กับคำว่า อัจฉริยะ หรือบริษัทเทคโนโลยียักษ์ใหญ่อย่างอะเมซอนอาจด้อยค่าความสามารถของผู้หญิงโดยไม่รู้ตัว เช่น AI ที่ใช้คัดกรองผู้สมัครงานของอะเมซอนจะหักคะแนนเรซูเมใดก็ตามที่มีคำว่า ผู้หญิง

ทุกวันนี้เราต่างประจักษ์ถึงความปราดเปรื่องของ AI ว่าสามารถประมวลผลคิด และวิเคราะห์ข้อมูลมหาศาลได้อย่างแม่นยำ แต่บางครั้งผลลัพธ์ที่ได้นั้นก็ยังห่างไกลจากคำว่าเที่ยงธรรมและที่แย่ไปกว่านั้นคือแฝงไปด้วยอคติ

AI ที่มีหัวใจ เล่มนี้จะแสดงถึงความจำเป็น และแนวทางพัฒนาปรับปรุงศาสตร์การออกแบบอัลกอริทึมให้ใส่ใจคุณค่าทางสังคมมากยิ่งขึ้น`,
      isbn: "9786168266403",
      pages: 296,
      coverImageUrl: "/images/ethical-algo.webp",
    },
    {
      title: "เตรียมสอบความถนัดแพทย์ ฉบับติวพร้อมสอบ กสพท.",
      author: "ปาณัสม์ ชูชีพวัฒนา (พี่แมทธิว) และคณะ",
      genre: "คู่มือเตรียมสอบ",
      description: `สรุปเนื้อหาเพื่อเตรียมความพร้อมสำหรับผู้เข้าสอบความถนัดทางแพทย์
ประกอบไปด้วยส่วนคิดด้วยเชาวน์ จริยธรรมทางการแพทย์ และส่วนเชื่อมโยง
พร้อมแนวข้อสอบเสมือนจริงมีเฉลยละเอียดเขียนโดยผู้มีประสบการณ์จากสนามสอบตัวจริง
พร้อมแนะเทคนิคการทำข้อสอบให้ได้คะแนนสูงในเวลาจำกัด`,
      isbn: "9786162369025",
      pages: 301,
      coverImageUrl: "/images/pid-13884.jpg",
    },
    {
      title: "การออกแบบและวิเคราะห์อัลกอริทึม",
      author: "สมชาย ประสิทธิ์จูตระกูล",
      genre: "คอมพิวเตอร์",
      description: `อัลกอริทึม คือ ขั้นตอนวิธีการแก้ไขปัญหาด้วยคอมพิวเตอร์ อันเป็นแนวคิดการแก้ปัญหาของผู้ออกแบบที่นำมาแปลงเป็นฮาร์ดแวร์หรือซอฟต์แวร์ อัลกอริทึมจึงเป็นศาสตร์ที่มีบทบาทสำคัญมากในการศึกษาทางวิทยาการและวิศวกรรมคอมพิวเตอร์ หนังสือเล่มนี้นำเสนอกลวิธีมาตรฐานต่าง ๆ ในการออกแบบและการวิเคราะห์อัลกอริทึม พร้อมกับการจำแนกความยากง่ายของปัญหา ตัวอย่าง และแบบฝึกหัด โดยมีจุดประสงค์หลักเพื่อให้ผู้อ่านสามารถออกแบบอัลกอริทึมที่มีประสิทธิภาพเพื่อแก้ไขปัญหาที่ได้รับ`,
      isbn: "9786165511940",
      pages: 384,
      coverImageUrl: "/images/somchai-algo.jpg",
    },
  ],
});


================================================
File: prisma/migrations/migration_lock.toml
================================================
# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "postgresql"

================================================
File: prisma/migrations/20250205081714_book_and_post/migration.sql
================================================
-- CreateTable
CREATE TABLE "book" (
    "id" TEXT NOT NULL,
    "title" TEXT NOT NULL,
    "author" TEXT NOT NULL,
    "genre" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "isbn" TEXT NOT NULL,
    "pages" INTEGER NOT NULL,
    "cover_image_url" TEXT,

    CONSTRAINT "book_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "post" (
    "id" TEXT NOT NULL,
    "title" TEXT NOT NULL,
    "content" TEXT,
    "published" BOOLEAN NOT NULL DEFAULT false,
    "book_id" TEXT NOT NULL,

    CONSTRAINT "post_pkey" PRIMARY KEY ("id")
);

-- AddForeignKey
ALTER TABLE "post" ADD CONSTRAINT "post_book_id_fkey" FOREIGN KEY ("book_id") REFERENCES "book"("id") ON DELETE RESTRICT ON UPDATE CASCADE;


================================================
File: src/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  font-family: kanit, sans-serif;
  background-image: linear-gradient(to bottom right, white, lightblue);
  background-size: cover;
  background-repeat: no-repeat;
  width: 100%;
  height: 100%;
  margin: 0px;
  color: #333;
  min-height: 100vh;
}

nav ul li a:hover {
  color: #304674;
  text-decoration: underline;
}

main {
  margin: 20px;
  padding: 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
}


================================================
File: src/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Header from "./searchPage/components/Header";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "BookBook",
  description: "A Marketplace for second-handed books",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <Header />
        {children}
      </body>
    </html>
  );
}


================================================
File: src/app/page.tsx
================================================
import Link from "next/link";

export default function Home() {
  return (
    <main>
      <div>hi</div>
      <h1 style={{ color: "lightblue" }}>
        B is cooking searchPage <Link href="/searchPage">click here to see</Link>
      </h1>
    </main>
  );
}


================================================
File: src/app/api/books/route.ts
================================================
import { prisma } from "@/lib/prisma";
import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";

const createBookRequest = z.object({
  title: z.string(),
  author: z.string(),
  genre: z.string(),
  description: z.string(),
  isbn: z.string(),
  pages: z.number(),
  coverImageUrl: z.string().optional(),
});

export async function POST(req: NextRequest) {
  try {
    const parsedData = createBookRequest.safeParse(await req.json());
    if (!parsedData.success) {
      return NextResponse.json({ error: parsedData.error.errors }, { status: 400 });
    }

    const newBook = await prisma.book.create({ data: parsedData.data });

    return NextResponse.json(newBook, { status: 201 });
  } catch (error) {
    console.error("Error creating book", error);
    return NextResponse.json({ error: "Cannot create a book" }, { status: 500 });
  }
}

export async function GET() {
  try {
    const books = await prisma.book.findMany();

    return NextResponse.json(books);
  } catch (error) {
    console.error("Error getting books", error);
    return NextResponse.json({ error: "Cannot get books" }, { status: 500 });
  }
}


================================================
File: src/app/api/books/[id]/route.ts
================================================
import { prisma } from "@/lib/prisma";
import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";

const updateBookRequest = z.object({
  title: z.string().optional(),
  author: z.string().optional(),
  genre: z.string().optional(),
  description: z.string().optional(),
  isbn: z.string().optional(),
  pages: z.number().optional(),
  coverImageUrl: z.string().optional(),
});

export async function GET(_: NextRequest, props: { params: Promise<{ id: string }> }) {
  const { id } = await props.params;
  try {
    const book = await prisma.book.findUnique({
      where: { id },
    });

    if (!book) {
      return NextResponse.json({ error: `Book with id ${id} not found` }, { status: 404 });
    }

    return NextResponse.json(book);
  } catch (error) {
    console.error(`Error getting book with id ${id}`, error);
    return NextResponse.json({ error: "Cannot get a book" }, { status: 500 });
  }
}

export async function PATCH(req: NextRequest, props: { params: Promise<{ id: string }> }) {
  const { id } = await props.params;
  try {
    const book = await prisma.book.findUnique({
      where: { id },
    });

    if (!book) {
      return NextResponse.json({ error: `Book with id ${id} not found` }, { status: 404 });
    }

    const parsedData = updateBookRequest.safeParse(await req.json());
    if (!parsedData.success) {
      return NextResponse.json({ error: parsedData.error.errors }, { status: 400 });
    }

    const updatedBook = await prisma.book.update({
      where: { id },
      data: parsedData.data,
    });

    return NextResponse.json(updatedBook);
  } catch (error) {
    console.error(`Error updating book with id ${id}`, error);
    return NextResponse.json({ error: "Cannot update the book" }, { status: 500 });
  }
}

export async function DELETE(_: NextRequest, props: { params: Promise<{ id: string }> }) {
  const params = await props.params;
  try {
    const book = await prisma.book.findUnique({ where: { id: params.id } });
    if (!book) {
      return NextResponse.json({ error: `Book with id ${params.id} not found` }, { status: 404 });
    }

    const posts = await prisma.post.findMany({ where: { bookId: params.id } });
    if (posts.length > 0) {
      return NextResponse.json(
        { error: `Cannot delete book with id ${params.id} because it has posts` },
        { status: 400 }
      );
    }

    await prisma.book.delete({ where: { id: params.id } });

    return NextResponse.json({ message: `Book with id ${params.id} deleted successfully` }, { status: 200 });
  } catch (error) {
    console.error(`Error deleting book with id ${params.id}`, error);
    return NextResponse.json({ error: "Cannot delete book" }, { status: 500 });
  }
}


================================================
File: src/app/api/posts/route.ts
================================================
import { prisma } from "@/lib/prisma";
import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";

const createPostRequest = z.object({
  title: z.string(),
  content: z.string(),
  published: z.boolean(),
  bookId: z.string(),
});

export async function POST(req: NextRequest) {
  try {
    const parsedData = createPostRequest.safeParse(await req.json());
    if (!parsedData.success) {
      return NextResponse.json({ error: parsedData.error.errors }, { status: 400 });
    }

    const book = await prisma.book.findUnique({
      where: { id: parsedData.data.bookId },
    });
    if (!book) {
      return NextResponse.json({ error: `Book with id ${parsedData.data.bookId} not found` }, { status: 404 });
    }

    const newPost = await prisma.post.create({ data: parsedData.data });

    return NextResponse.json(newPost, { status: 201 });
  } catch (error) {
    console.error("Error creating post", error);
    return NextResponse.json({ error: "Cannot create a post" }, { status: 500 });
  }
}

export async function GET() {
  try {
    const posts = await prisma.post.findMany();

    return NextResponse.json(posts);
  } catch (error) {
    console.error("Error getting posts", error);
    return NextResponse.json({ error: "Cannot get posts" }, { status: 500 });
  }
}


================================================
File: src/app/api/posts/[id]/route.ts
================================================
import { prisma } from "@/lib/prisma";
import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";

const updatePostRequest = z.object({
  title: z.string().optional(),
  content: z.string().optional(),
  published: z.boolean().optional(),
  bookId: z.string().optional(),
});

export async function GET(_: NextRequest, props: { params: Promise<{ id: string }> }) {
  const { id } = await props.params;
  try {
    const post = await prisma.post.findUnique({
      where: { id },
    });

    if (!post) {
      return NextResponse.json({ error: `Post with id ${id} not found` }, { status: 404 });
    }

    return NextResponse.json(post);
  } catch (error) {
    console.error(`Error getting post with id ${id}`, error);
    return NextResponse.json({ error: "Cannot get a post" }, { status: 500 });
  }
}

export async function PATCH(req: NextRequest, props: { params: Promise<{ id: string }> }) {
  const { id } = await props.params;
  try {
    const post = await prisma.post.findUnique({
      where: { id },
    });

    if (!post) {
      return NextResponse.json({ error: `Post with id ${id} not found` }, { status: 404 });
    }

    const parsedData = updatePostRequest.safeParse(await req.json());
    if (!parsedData.success) {
      return NextResponse.json({ error: parsedData.error.errors }, { status: 400 });
    }

    const book = await prisma.book.findUnique({
      where: { id: parsedData.data.bookId },
    });
    if (!book) {
      return NextResponse.json({ error: `Book with id ${parsedData.data.bookId} not found` }, { status: 404 });
    }

    const updatedPost = await prisma.post.update({
      where: { id },
      data: parsedData.data,
    });

    return NextResponse.json(updatedPost);
  } catch (error) {
    console.error(`Error updating post with id ${id}`, error);
    return NextResponse.json({ error: "Cannot update the post" }, { status: 500 });
  }
}

export async function DELETE(_: NextRequest, props: { params: Promise<{ id: string }> }) {
  const { id } = await props.params;
  try {
    const post = await prisma.post.findUnique({ where: { id } });
    if (!post) {
      return NextResponse.json({ error: `Post with id ${id} not found` }, { status: 404 });
    }

    await prisma.post.delete({ where: { id } });

    return NextResponse.json({ message: `Post with id ${id} deleted successfully` }, { status: 200 });
  } catch (error) {
    console.error(`Error deleting post with id ${id}`, error);
    return NextResponse.json({ error: "Cannot delete post" }, { status: 500 });
  }
}


================================================
File: src/app/searchPage/page.tsx
================================================
"use client";
import Image from "next/image";

import SearchByDetail from "@/app/searchPage/components/SearchByDetail";

import { books } from "@/data/book";
import { Kanit } from "next/font/google";
import { useState } from "react";
import BookList from "./components/BookList";

const KanitFont = Kanit({
  subsets: ["latin"],
  weight: "400",
});

function SearchPage() {
  const [detailSearch, setDetailSearch] = useState(false);
  const [specialSearch, setSpecialSearch] = useState(false);

  console.log(detailSearch);
  return (
    <>
      <div className="m-0 box-border p-0">
        <main className={`${KanitFont.className}`}>
          <div className="flex gap-16">
            <div className="relative h-auto min-w-[300px] max-w-[300px]">
              <Image src="/images/Picture1.png" alt="Illustration" fill={true} />
            </div>
            <div className="w-[200%]">
              <h2 className="mb-2.5 text-3xl">ค้นหาหนังสือ</h2>
              <div className="mb-5 flex flex-row">
                <input
                  className="flex-1 rounded-md border border-gray-300 p-2.5"
                  type="text"
                  placeholder="ชื่อหนังสือ"
                ></input>
                <button className="cursor-pointer rounded-md border-none bg-[#9dc4de] p-2.5 text-white">
                  ค้นหาข้อมูล
                </button>
              </div>
              <div className="advanced-search-toggle">
                <button
                  className={`m-[15px_15px_10px_15px] mb-5 p-3.5 ${specialSearch ? `bg-[#48AFF3]` : `bg-[#babcbd]`} cursor-pointer rounded-sm border-none text-white`}
                  onClick={() => {
                    setSpecialSearch(true);
                    setDetailSearch(false);
                  }}
                >
                  ค้นหาด้วยเงื่อนไขพิเศษ
                </button>
                <button
                  className={`m-[15px_15px_10px_15px] mb-5 p-3.5 ${detailSearch ? `bg-[#48AFF3]` : `bg-[#babcbd]`} cursor-pointer rounded-sm border-none text-white`}
                  onClick={() => {
                    setDetailSearch(true);
                    setSpecialSearch(false);
                  }}
                >
                  ค้นหาด้วยรายละเอียดเพิ่มเติม
                </button>
              </div>
              {detailSearch && !specialSearch && <SearchByDetail />}
              {!detailSearch && specialSearch && <div>ขี้เกียจทำละ</div>}
            </div>
          </div>
          {!detailSearch && !specialSearch && <BookList books={books} />}
        </main>
      </div>
    </>
  );
}

export default SearchPage;


================================================
File: src/app/searchPage/components/SearchByDetail.tsx
================================================
function SearchByDetail() {
  return (
    <>
      <form className="grid gap-2.5">
        <input className="rounded-sm border border-gray-300 p-2.5" type="text" placeholder="ชื่อหนังสือ"></input>
        <input className="rounded-sm border border-gray-300 p-2.5" type="text" placeholder="ผู้เขียน"></input>
        <input className="rounded-sm border border-gray-300 p-2.5" type="text" placeholder="สำนักพิมพ์"></input>
        <input className="rounded-sm border border-gray-300 p-2.5" type="text" placeholder="ISBN"></input>
      </form>
    </>
  );
}

export default SearchByDetail;


================================================
File: src/app/searchPage/components/bookCard.tsx
================================================
import { Book } from "@/types/book";
import Image from "next/image";

type BookCardProps = {
  book: Book;
};

function BookCard({ book }: BookCardProps) {
  return (
    <>
      <div className="flex flex-col overflow-hidden rounded-lg border border-gray-300 bg-white p-2.5">
        <div className="m-2.5 flex flex-row justify-between text-lg">
          <h3>{book.bookname}</h3>
          <span>{book.price} ฿</span>
        </div>
        <div className="m-2.5 flex flex-row">
          <Image
            className="m-2.5 h-40 w-auto rounded-lg"
            src={book.picture}
            width={500}
            height={500}
            alt="Book Cover"
          />
          <div className="flex h-screen max-h-[275px] flex-col justify-between">
            <div>
              <div>
                <strong>ผู้เขียน </strong>
                {book.author}
              </div>
              <div>
                <div>
                  <strong>รายละเอียด</strong>
                </div>{" "}
                {book.desc}
              </div>
            </div>
            <div className="mt-2.5 flex items-center justify-center">
              <button className="m-2.5 cursor-pointer rounded-sm border-2 border-[#B8B8B8] bg-white p-1.5 px-4 py-2 pl-2 pr-2 text-sm text-black">
                <div>ดูข้อมูล</div>
              </button>
              <button className="rounded-sm border-2 border-[#B8B8B8] bg-[#8BB9D8] p-1.5 px-4 py-2 pl-2 pr-2 text-sm text-white">
                เพิ่มใส่ตะกร้า
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

export default BookCard;


================================================
File: src/app/searchPage/components/bookList.tsx
================================================
import BookCard from "@/app/searchPage/components/BookCard";
import { Book } from "@/types/book";

type BookListProps = {
  books: Book[];
};

function BookList({ books }: BookListProps) {
  return (
    <div className="grid-cols-auto-fit-400 grid w-full gap-8 p-8 text-lg">
      {books.map((book: Book) => (
        <BookCard book={book} key={book.id} />
      ))}
    </div>
  );
}

export default BookList;


================================================
File: src/app/searchPage/components/header.tsx
================================================
import Image from "next/image";

function Header() {
  return (
    <header className="flex flex-row items-center justify-between border-b border-gray-300 bg-white p-2.5">
      <div className="text-2xl font-bold leading-tight text-blue-500">
        BOOK<br></br>BOOK
      </div>
      <nav>
        <ul className="flex list-none items-center justify-between gap-4">
          <li>
            <a href="#" className="font-bold text-gray-800 no-underline">
              ค้นหาหนังสือ
            </a>
          </li>
          <li>
            <a href="#" className="font-bold text-gray-800 no-underline">
              ประวัติการสั่งซื้อ
            </a>
          </li>
          <li>
            <a href="#" className="font-bold text-gray-800 no-underline">
              ติดต่อเรา
            </a>
          </li>
          <li>
            <div className="relative h-10 w-10 rounded-full bg-gray-300">
              <Image src="/images/profile.jpg" alt="Profile" fill={true} />
            </div>
          </li>
        </ul>
      </nav>
    </header>
  );
}

export default Header;


================================================
File: src/data/book.ts
================================================
import { Book } from "@/types/book";

export const books: Book[] = [
  {
    id: 0,
    bookname: "สถาปัตยกรรมคอมพิวเตอร์",
    author: "ดร.เกริก พิรมย์โสภา",
    desc: "หนังสือง่าย ๆ สำหรับการออกแบบสถาปัตยกรรมเนื้อหาประกอบด้วยการวิเคราะห์สมรรถภาพและสถาปัตยกรรมแบบต่าง ๆ",
    price: 129,
    picture: "/images/krerk-csa-book.jpg",
  },
  {
    id: 1,
    bookname: "人妻教師が教え子の女子高生にドはまりする話",
    author: "人 間 人 間",
    desc: "人妻教師が教え子の女子高生にドはまりする話",
    price: 129,
    picture: "/images/hitozuma-1.jpg",
  },
  {
    id: 2,
    bookname: "สถาปัตยกรรมคอมพิวเตอร์",
    author: "ดร.เกริก พิรมย์โสภา",
    desc: "หนังสือง่าย ๆ สำหรับการออกแบบสถาปัตยกรรมเนื้อหาประกอบด้วยการวิเคราะห์สมรรถภาพและสถาปัตยกรรมแบบต่าง ๆ",
    price: 129,
    picture: "/images/krerk-csa-book.jpg",
  },
  {
    id: 3,
    bookname: "สถาปัตยกรรมคอมพิวเตอร์",
    author: "ดร.เกริก พิรมย์โสภา",
    desc: "หนังสือง่าย ๆ สำหรับการออกแบบสถาปัตยกรรมเนื้อหาประกอบด้วยการวิเคราะห์สมรรถภาพและสถาปัตยกรรมแบบต่าง ๆ",
    price: 129,
    picture: "/images/krerk-csa-book.jpg",
  },
  {
    id: 4,
    bookname: "สถาปัตยกรรมคอมพิวเตอร์",
    author: "ดร.เกริก พิรมย์โสภา",
    desc: "หนังสือง่าย ๆ สำหรับการออกแบบสถาปัตยกรรมเนื้อหาประกอบด้วยการวิเคราะห์สมรรถภาพและสถาปัตยกรรมแบบต่าง ๆ",
    price: 129,
    picture: "/images/krerk-csa-book.jpg",
  },
  {
    id: 5,
    bookname: "สถาปัตยกรรมคอมพิวเตอร์",
    author: "ดร.เกริก พิรมย์โสภา",
    desc: "หนังสือง่าย ๆ สำหรับการออกแบบสถาปัตยกรรมเนื้อหาประกอบด้วยการวิเคราะห์สมรรถภาพและสถาปัตยกรรมแบบต่าง ๆ",
    price: 129,
    picture: "/images/krerk-csa-book.jpg",
  },
  {
    id: 6,
    bookname: "สถาปัตยกรรมคอมพิวเตอร์",
    author: "ดร.เกริก พิรมย์โสภา",
    desc: "หนังสือง่าย ๆ สำหรับการออกแบบสถาปัตยกรรมเนื้อหาประกอบด้วยการวิเคราะห์สมรรถภาพและสถาปัตยกรรมแบบต่าง ๆ",
    price: 129,
    picture: "/images/krerk-csa-book.jpg",
  },
  {
    id: 7,
    bookname: "สถาปัตยกรรมคอมพิวเตอร์",
    author: "ดร.เกริก พิรมย์โสภา",
    desc: "หนังสือง่าย ๆ สำหรับการออกแบบสถาปัตยกรรมเนื้อหาประกอบด้วยการวิเคราะห์สมรรถภาพและสถาปัตยกรรมแบบต่าง ๆ",
    price: 129,
    picture: "/images/krerk-csa-book.jpg",
  },
  {
    id: 8,
    bookname: "สถาปัตยกรรมคอมพิวเตอร์",
    author: "ดร.เกริก พิรมย์โสภา",
    desc: "หนังสือง่าย ๆ สำหรับการออกแบบสถาปัตยกรรมเนื้อหาประกอบด้วยการวิเคราะห์สมรรถภาพและสถาปัตยกรรมแบบต่าง ๆ",
    price: 129,
    picture: "/images/krerk-csa-book.jpg",
  },
  {
    id: 9,
    bookname: "สถาปัตยกรรมคอมพิวเตอร์",
    author: "ดร.เกริก พิรมย์โสภา",
    desc: "หนังสือง่าย ๆ สำหรับการออกแบบสถาปัตยกรรมเนื้อหาประกอบด้วยการวิเคราะห์สมรรถภาพและสถาปัตยกรรมแบบต่าง ๆ",
    price: 129,
    picture: "/images/krerk-csa-book.jpg",
  },
];


================================================
File: src/lib/prisma.ts
================================================
import { PrismaClient } from "@prisma/client";

const globalForPrisma = global as unknown as { prisma?: PrismaClient };

export const prisma = globalForPrisma.prisma ?? new PrismaClient();

if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;


================================================
File: src/types/book.ts
================================================
export type Book = {
  id: number;
  bookname: string;
  author: string;
  desc: string;
  price: number;
  picture: string;
};


================================================
File: .github/pull_request_template.md
================================================
## Changes made

- [ ]  New features
- [ ]  Bug fixes
- [ ]  Breaking changes
- [ ] Refactor

## Describe what you have done

-

### New Features

-

### Fix

-

### Others

-


