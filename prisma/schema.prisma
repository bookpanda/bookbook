// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String    @map("first_name")
  lastName      String    @map("last_name")
  password      String
  phoneNumber   String?   @unique @map("phone_number")
  address       String?
  isSeller      Boolean   @default(false) @map("is_seller")
  isVerified    Boolean   @default(false) @map("is_verified")
  emailVerified DateTime? @map("email_verified")
  phoneVerified DateTime? @map("phone_verified")
  pdpaConsent   Boolean  @default(false) @map("pdpa_consent")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  sellerProfile SellerProfile?
  posts         Post[]
  books         Book[]

  @@map("users")
}

model SellerProfile {
  id              String   @id @default(cuid())
  idCardNumber    String   @map("id_card_number")
  idCardImage     String   @map("id_card_image")
  bankAccount     String   @map("bank_account")
  bankName        String   @map("bank_name")
  isApproved      Boolean  @default(false) @map("is_approved")
  approvedAt      DateTime? @map("approved_at")
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique @map("user_id")

  @@map("seller_profiles")
}

model Book {
  id            String @id @default(cuid())
  title         String
  author        String
  genre         String
  description   String
  isbn          String
  pages         Int
  coverImageKey String @map("cover_image_key")
  seller        User   @relation(fields: [sellerId], references: [id])
  sellerId      String @map("seller_id")
  posts         Post[]

  @@map("books")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  price     Int
  published Boolean @default(false)
  seller    User    @relation(fields: [sellerId], references: [id])
  sellerId  String  @map("seller_id")
  book      Book    @relation(fields: [bookId], references: [id])
  bookId    String  @unique @map("book_id")

  @@map("posts")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  type      String   // 'email' or 'phone'
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([email, type])
  @@map("verification_tokens")
}

model PhoneVerification {
  id          String   @id @default(cuid())
  phoneNumber String   @unique
  code        String   @unique
  expires     DateTime
}